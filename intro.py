# 딥러닝은 머신러닝이 처리하기 어려운 데이터를 더 잘 처리한다
# 딥러닝  = 이미지/영상/소리 텍스트/음성등 비정형 데이터에 특화
# 머신러닝 = 데이터베이스. 레코드파일, 엑셀/csv등에 담긴 정형 데이터에 특화

#%%
# 넘파이로 배열만들기
# 난 그냥 써서 몰랐는데 array()함수는 넘파이함수다
import numpy as np
my_arr = np.array([[10, 20, 30] ,[40, 50, 60]])
print(my_arr)
# 그렇다 array함수는 파이썬 리스트와 형태가 비슷하다. 만약 해당 리스트의 값이 파이썬 리스트인지 넘파이 배열인지 어찌아는가

# %%
type(my_arr)
# type()함수로 확인하면된다 

# %%
# 넘파이 배열에서 요소선택하기
# 넘파이 배열의 요소를 선텍하는 방법은 파이썬 리스트엣 요소를 선택하는 방법과 동일하다
my_arr[0][2]
# 첫번째 행의 2번째 요소

# %%
# 넘파이가 제공하는 매우 편리한 내장함수 하나 
# 파이썬 리스트의 요소를 모드 더하려면 for문으로 돌려야 되는데 넘파이 sum()함수를 통해 반복문을 쓰지않고 배열의 합을 계산할수 있음
np.sum(my_arr)
# %%
# 머신러닝과 딥러닝중 중요한건 데이터와 학습시킨 모델 그리고 데이터셋의 시각화일것이다
# 시각화의 중요한 요소중 하나인 그래프그리기는 맷플롭립 사용
import matplotlib.pyplot as plt
# 1, 선그래프 
plt.plot([1,2,3,4,5], [1,4,9,22,42]) # x축 y축의 값을 파이썬 리스트로 전달
plt.show()
# %%
# 2. 산점도 그래프
plt.scatter([1,2,3,4,5], [1,4,9,16,25])
# plt.show()안해도 보임
# %%
# 3. 넘파이 배열로 산점도 그리기
x = np.random.randn(1000) # 표준 정규 분포를 따르는 난수 1000개
y = np.ramdn.rand(1000)# 표준 정규 분포를 따르는 난수 1000개
plt.scatter(x,y)
plt.show()
# %%
